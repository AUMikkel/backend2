// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backendassign2;

#nullable disable

namespace backendassign2.Migrations
{
    [DbContext(typeof(dbcontext))]
    partial class dbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerOrderMeal", b =>
                {
                    b.Property<int>("CustomerOrderOrderId")
                        .HasColumnType("int");

                    b.Property<int>("mealId")
                        .HasColumnType("int");

                    b.HasKey("CustomerOrderOrderId", "mealId");

                    b.HasIndex("mealId");

                    b.ToTable("CustomerOrderMeal", (string)null);
                });

            modelBuilder.Entity("backendassign2.Entities.BikeType", b =>
                {
                    b.Property<string>("Bike")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Bike");

                    b.ToTable("BikeType", (string)null);
                });

            modelBuilder.Entity("backendassign2.Entities.Cook", b =>
                {
                    b.Property<int>("CookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CookId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("HasPassedFoodSafetyCourse")
                        .HasColumnType("bit");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Zipcode")
                        .HasColumnType("int");

                    b.HasKey("CookId");

                    b.ToTable("Cooks", (string)null);
                });

            modelBuilder.Entity("backendassign2.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("PaymentOptionOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Zipcode")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("PaymentOptionOption");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("backendassign2.Entities.CustomerOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerID");

                    b.HasIndex("TripId");

                    b.ToTable("CustomerOrders", (string)null);
                });

            modelBuilder.Entity("backendassign2.Entities.DeliveryDriver", b =>
                {
                    b.Property<int>("CyclistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CyclistID"));

                    b.Property<string>("BikeTypeBike")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("CyclistID");

                    b.HasIndex("BikeTypeBike");

                    b.ToTable("DeliveryDrivers", (string)null);
                });

            modelBuilder.Entity("backendassign2.Entities.Meal", b =>
                {
                    b.Property<int>("mealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mealId"));

                    b.Property<int>("CookId")
                        .HasColumnType("int");

                    b.Property<string>("Dish")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("mealId");

                    b.HasIndex("CookId");

                    b.ToTable("Meals", (string)null);
                });

            modelBuilder.Entity("backendassign2.Entities.OrderMeal", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("OrderMeals", (string)null);
                });

            modelBuilder.Entity("backendassign2.Entities.PaymentOption", b =>
                {
                    b.Property<string>("Option")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Option");

                    b.ToTable("PaymentOptions", (string)null);
                });

            modelBuilder.Entity("backendassign2.Entities.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripId"));

                    b.Property<int>("DeliveryDriverCyclistID")
                        .HasColumnType("int");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.HasKey("TripId");

                    b.HasIndex("DeliveryDriverCyclistID");

                    b.ToTable("Trip", (string)null);
                });

            modelBuilder.Entity("backendassign2.Entities.TripDetails", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("TripDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DetailId");

                    b.HasIndex("TripId");

                    b.ToTable("TripDetails", (string)null);
                });

            modelBuilder.Entity("CustomerOrderMeal", b =>
                {
                    b.HasOne("backendassign2.Entities.CustomerOrder", null)
                        .WithMany()
                        .HasForeignKey("CustomerOrderOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendassign2.Entities.Meal", null)
                        .WithMany()
                        .HasForeignKey("mealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backendassign2.Entities.Customer", b =>
                {
                    b.HasOne("backendassign2.Entities.PaymentOption", "PaymentOption")
                        .WithMany("Customer")
                        .HasForeignKey("PaymentOptionOption")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentOption");
                });

            modelBuilder.Entity("backendassign2.Entities.CustomerOrder", b =>
                {
                    b.HasOne("backendassign2.Entities.Customer", "Customer")
                        .WithMany("CustomerOrder")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendassign2.Entities.Trip", "Trip")
                        .WithMany("CustomerOrder")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("backendassign2.Entities.DeliveryDriver", b =>
                {
                    b.HasOne("backendassign2.Entities.BikeType", "BikeType")
                        .WithMany("DeliveryDriver")
                        .HasForeignKey("BikeTypeBike");

                    b.Navigation("BikeType");
                });

            modelBuilder.Entity("backendassign2.Entities.Meal", b =>
                {
                    b.HasOne("backendassign2.Entities.Cook", "Cook")
                        .WithMany()
                        .HasForeignKey("CookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cook");
                });

            modelBuilder.Entity("backendassign2.Entities.OrderMeal", b =>
                {
                    b.HasOne("backendassign2.Entities.Meal", "Meal")
                        .WithMany("OrderMeal")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendassign2.Entities.CustomerOrder", "CustomerOrder")
                        .WithMany("OrderMeal")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerOrder");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("backendassign2.Entities.Trip", b =>
                {
                    b.HasOne("backendassign2.Entities.DeliveryDriver", "DeliveryDriver")
                        .WithMany("Trip")
                        .HasForeignKey("DeliveryDriverCyclistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryDriver");
                });

            modelBuilder.Entity("backendassign2.Entities.TripDetails", b =>
                {
                    b.HasOne("backendassign2.Entities.Trip", "Trip")
                        .WithMany("TripDetails")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("backendassign2.Entities.BikeType", b =>
                {
                    b.Navigation("DeliveryDriver");
                });

            modelBuilder.Entity("backendassign2.Entities.Customer", b =>
                {
                    b.Navigation("CustomerOrder");
                });

            modelBuilder.Entity("backendassign2.Entities.CustomerOrder", b =>
                {
                    b.Navigation("OrderMeal");
                });

            modelBuilder.Entity("backendassign2.Entities.DeliveryDriver", b =>
                {
                    b.Navigation("Trip");
                });

            modelBuilder.Entity("backendassign2.Entities.Meal", b =>
                {
                    b.Navigation("OrderMeal");
                });

            modelBuilder.Entity("backendassign2.Entities.PaymentOption", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("backendassign2.Entities.Trip", b =>
                {
                    b.Navigation("CustomerOrder");

                    b.Navigation("TripDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
